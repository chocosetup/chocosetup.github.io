{"version":3,"sources":["AppCategory.js","Generator.js","AppPicker.js","Header.js","Introduction.js","App.js","serviceWorker.js","index.js"],"names":["AppCategory","props","handleCheckboxChange","e","apps","Set","pickedApps","target","checked","add","value","delete","setPickedApps","className","name","map","app","key","chocoid","title","type","onChange","bind","Generator","disabled","onClick","console","log","this","AppPicker","useState","AppList","categories","category","i","Header","id","src","process","alt","Introduction","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2oGA0CeA,MAvCf,SAAqBC,GAAQ,IAAD,OAC1B,SAASC,EAAqBC,GAC5B,IAAIC,EAAO,IAAIC,IAAIJ,EAAMK,YAErBH,EAAEI,OAAOC,QACXJ,EAAKK,IAAIN,EAAEI,OAAOG,OAElBN,EAAKO,OAAOR,EAAEI,OAAOG,OAGvBT,EAAMW,cAAcR,GAGtB,OACE,yBAAKS,UAAU,YACb,4BAAKZ,EAAMa,MAEX,4BACGb,EAAMG,KAAKW,KAAI,SAACC,GACf,OACE,wBAAIC,IAAKD,EAAIE,SACX,2BAAOL,UAAU,YAAYM,MAAOH,EAAIF,MACtC,2BACEM,KAAK,WACLC,SAAUnB,EAAqBoB,KAAK,GACpCT,UAAU,eACVC,KAAK,OACLJ,MAAOM,EAAIE,UAEZF,EAAIF,a,YCdNS,MAff,SAAmBtB,GAKjB,OACE,yBAAKY,UAAU,aACb,yEACA,4BAAQA,UAAU,SAASW,SAAS,GAAGC,QAP3C,WACEC,QAAQC,IAAI,iBAAkB1B,EAAMK,aAM4BgB,KAAKM,OACjE,0BAAMf,UAAU,QAAhB,e,OCmBOgB,MAzBf,WAAsB,IAAD,EACiBC,mBAAS,IAAIzB,KAD9B,mBACZC,EADY,KACAM,EADA,KAGnB,OACE,yBAAKC,UAAU,aACb,yDAEA,yBAAKA,UAAU,sBACZkB,EAAQC,WAAWjB,KAAI,SAACkB,EAAUC,GACjC,OACE,kBAAC,EAAD,iBACMD,EADN,CAEEhB,IAAKgB,EAASnB,KAAOoB,EACrB5B,WAAYA,EACZM,cAAeA,SAMvB,kBAAC,EAAD,CAAWN,WAAYA,M,MCVd6B,MAbf,WACE,OACE,4BAAQtB,UAAU,UAChB,yBACEA,UAAU,SACVuB,GAAG,OACHC,IAAKC,uBACLC,IAAI,sB,MCEGC,MATf,WACE,OACE,yBAAK3B,UAAU,gBACb,2EACA,2FCUS4B,MAXf,WACE,OACE,yBAAK5B,UAAU,cACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,4BAAQA,UAAU,aCAJ6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.d395bc8e.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./AppCategory.css\";\n\nfunction AppCategory(props) {\n  function handleCheckboxChange(e) {\n    let apps = new Set(props.pickedApps);\n\n    if (e.target.checked) {\n      apps.add(e.target.value);\n    } else {\n      apps.delete(e.target.value);\n    }\n\n    props.setPickedApps(apps);\n  }\n\n  return (\n    <div className=\"category\">\n      <h3>{props.name}</h3>\n\n      <ul>\n        {props.apps.map((app) => {\n          return (\n            <li key={app.chocoid}>\n              <label className=\"app-label\" title={app.name}>\n                <input\n                  type=\"checkbox\"\n                  onChange={handleCheckboxChange.bind(this)}\n                  className=\"app-checkbox\"\n                  name=\"apps\"\n                  value={app.chocoid}\n                />\n                {app.name}\n              </label>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n\nexport default AppCategory;\n","import React from \"react\";\nimport \"./Generator.css\";\n\nfunction Generator(props) {\n  function logPickedApps() {\n    console.log(\"Picked apps : \", props.pickedApps);\n  }\n\n  return (\n    <div className=\"generator\">\n      <h2>2. Download and run your custom installer</h2>\n      <button className=\"button\" disabled=\"\" onClick={logPickedApps.bind(this)}>\n        <span className=\"text\">Download</span>\n      </button>\n    </div>\n  );\n}\n\nexport default Generator;\n","import React, { useState } from \"react\";\nimport AppCategory from \"./AppCategory\";\nimport \"./AppPicker.css\";\nimport Generator from \"./Generator\";\nimport AppList from \"./AppList.json\";\n\nfunction AppPicker() {\n  const [pickedApps, setPickedApps] = useState(new Set());\n\n  return (\n    <div className=\"apppicker\">\n      <h2>1. Pick the apps you want</h2>\n\n      <div className=\"category-container\">\n        {AppList.categories.map((category, i) => {\n          return (\n            <AppCategory\n              {...category}\n              key={category.name + i}\n              pickedApps={pickedApps}\n              setPickedApps={setPickedApps}\n            />\n          );\n        })}\n      </div>\n\n      <Generator pickedApps={pickedApps} />\n    </div>\n  );\n}\n\nexport default AppPicker;\n","import React from \"react\";\nimport \"./Header.css\";\n\nfunction Header() {\n  return (\n    <header className=\"header\">\n      <img\n        className=\"center\"\n        id=\"logo\"\n        src={process.env.PUBLIC_URL + \"/logo.png\"}\n        alt=\"chocosetup logo\"\n      ></img>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport \"./Introduction.css\";\n\nfunction Introduction() {\n  return (\n    <div className=\"introduction\">\n      <p>Install and Update All Your Programs at Once</p>\n      <p>No toolbars. No clicking next. Just pick your apps and go.</p>\n    </div>\n  );\n}\n\nexport default Introduction;\n","import React from \"react\";\nimport \"./App.css\";\nimport AppPicker from \"./AppPicker\";\nimport Header from \"./Header\";\nimport Introduction from \"./Introduction\";\n\nfunction App() {\n  return (\n    <div className=\"Chocosetup\">\n      <Header />\n      <Introduction />\n      <AppPicker />\n      <footer className=\"footer\"></footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}