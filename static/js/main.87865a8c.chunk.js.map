{"version":3,"sources":["AppCategory.js","AppPicker.js","Header.js","Introduction.js","App.js","serviceWorker.js","index.js"],"names":["AppCategory","props","className","name","apps","map","app","i","key","class","title","type","value","chocoid","AppPicker","AppList","categories","category","Header","id","src","process","alt","Introduction","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8mGA0BeA,MAvBf,SAAqBC,GACnB,OACE,yBAAKC,UAAU,YACb,4BACGD,EAAME,MAGT,4BAEIF,EAAMG,KAAKC,KAAI,SAACC,EAAKC,GACnB,OAAO,wBAAIC,IAAKD,GACd,2BAAOE,MAAM,YAAYC,MAAOJ,EAAIH,MAClC,2BAAOQ,KAAK,WAAWF,MAAM,eAAeN,KAAK,OAAOS,MAAON,EAAIO,UAClEP,EAAIH,a,eCONW,MAlBf,WACI,OACI,yBAAKZ,UAAU,aACX,yDAIA,yBAAKO,MAAM,sBAEHM,EAAQC,WAAWX,KAAI,SAACY,EAAUV,GAC9B,OAAO,kBAAC,EAAD,iBAAiBU,EAAjB,CAA2BT,IAAKD,W,MCJhDW,MARf,WACE,OACE,4BAAQhB,UAAU,UACd,yBAAKA,UAAU,SAASiB,GAAG,OAAOC,IAAKC,uBAAsCC,IAAI,sB,MCU1EC,MAbf,WACE,OACE,yBAAKrB,UAAU,gBACX,2EAGA,2FCQOsB,MAXf,WACE,OACE,yBAAKtB,UAAU,cACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,4BAAQA,UAAU,aCAJuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.87865a8c.chunk.js","sourcesContent":["import React from 'react';\r\nimport './AppCategory.css';\r\n\r\nfunction AppCategory(props) {\r\n  return (\r\n    <div className=\"category\">\r\n      <h3>\r\n        {props.name}\r\n      </h3>\r\n\r\n      <ul>\r\n        {\r\n          props.apps.map((app, i) => {\r\n            return <li key={i}>\r\n              <label class=\"app-label\" title={app.name}>\r\n                <input type=\"checkbox\" class=\"app-checkbox\" name=\"apps\" value={app.chocoid} />\r\n                {app.name}\r\n              </label>\r\n            </li>\r\n          })\r\n        }\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AppCategory;\r\n","import React from 'react';\r\nimport AppCategory from './AppCategory';\r\nimport './AppPicker.css';\r\nimport AppList from './applist.json';\r\n\r\nfunction AppPicker() {\r\n    return (\r\n        <div className=\"apppicker\">\r\n            <h2>\r\n                1. Pick the apps you want\r\n            </h2>\r\n\r\n            <div class=\"category-container\">\r\n                {\r\n                    AppList.categories.map((category, i) => {\r\n                        return <AppCategory {...category} key={i} />\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppPicker;\r\n","import React from 'react';\r\nimport './Header.css';\r\n\r\nfunction Header() {\r\n  return (\r\n    <header className=\"header\">\r\n        <img className=\"center\" id=\"logo\" src={process.env.PUBLIC_URL + \"/logo.png\"} alt=\"chocosetup logo\"></img>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport './Introduction.css';\r\n\r\nfunction Introduction() {\r\n  return (\r\n    <div className=\"introduction\">\r\n        <p>\r\n        Install and Update All Your Programs at Once\r\n        </p>\r\n        <p>\r\n        No toolbars. No clicking next. Just pick your apps and go.  \r\n        </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Introduction;\r\n","import React from 'react';\nimport './App.css';\nimport AppPicker from './AppPicker';\nimport Header from './Header';\nimport Introduction from './Introduction';\n\nfunction App() {\n  return (\n    <div className=\"Chocosetup\">\n      <Header/>\n      <Introduction/>\n      <AppPicker/>\n      <footer className=\"footer\"></footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}